name: Build wolfProvider

on:
  workflow_call:
    inputs:
      wolfssl_ref:
        required: true
        type: string
      openssl_ref:
        required: true
        type: string
      replace_default:
        required: false
        type: boolean
        default: false

jobs:
  build_wolfprovider_common:
    name: Build wolfProvider
    runs-on: ubuntu-22.04
    # Run inside Debian Bookworm to match packaging environment
    container:
      image: debian:bookworm
      env:
        DEBIAN_FRONTEND: noninteractive
    timeout-minutes: 20
    env:
      WOLFSSL_PACKAGES_PATH: /tmp/wolfssl-packages
      OPENSSL_PACKAGES_PATH: /tmp/openssl-packages
      WOLFPROV_PACKAGES_PATH: /tmp/wolfprov-packages
    steps:
      # Install git prior to cloning to ensure we have the full repo
      # TODO: create a docker with these pre-installed
      - name: Install common dependencies
        run: |
          apt-get update && apt-get install -y --no-install-recommends \
            build-essential \
            ccache \
            devscripts \
            debhelper \
            dh-autoreconf \
            libtool \
            pkg-config \
            git \
            wget \
            curl \
            ca-certificates \
            openssl \
            dpkg-dev \
            lintian \
            fakeroot \
            dh-exec \
            equivs \
            expect \
            xxd

      # Experimental: use ccache
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        id: cc
        with:
          create-symlink: true

      - name: Setup ccache environment variables
        run: |
          echo CC=ccache\ gcc >> "$GITHUB_ENV"
          echo CXX=ccache\ g++ >> "$GITHUB_ENV"
          echo CCACHE_BASEDIR=${GITHUB_WORKSPACE} >> "$GITHUB_ENV"
          echo CCACHE_NOHASHDIR=true >> "$GITHUB_ENV"
          echo CCACHE_COMPILERCHECK=content >> "$GITHUB_ENV"
          echo "CCACHE_DIR=${XDG_CACHE_HOME:-$HOME/.cache}/ccache" >> "$GITHUB_ENV"
          mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/ccache"

      - name: Sanity check ccache routing
        run: |
          set -x
          which -a gcc || true
          gcc --version | head -1
          ccache --zero-stats
          printf 'int main(){return 0;}\n' > t.c
          $CC -c t.c
          ccache -s

      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          fetch-tags: true

      # Avoid "detected dubious ownership" warning
      - name: Ensure the working directory safe
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      # When running on a fork the upstream tags are not present, so fetch them explicitly
      - name: Fetch tags from upstream(for Debian versioning)
        run: |
          git remote add upstream https://github.com/wolfSSL/wolfProvider.git || true
          git fetch upstream --tags --no-recurse-submodules

      # - name: Restore wolfSSL packages
      #   uses: actions/cache@v4
      #   id: wolfssl_cache
      #   with:
      #     path: |
      #       ${{ env.WOLFSSL_PACKAGES_PATH }}/*.deb
      #       ${{ env.WOLFSSL_PACKAGES_PATH }}/*.dsc
      #       ${{ env.WOLFSSL_PACKAGES_PATH }}/*.tar.gz
      #     key: wolfssl-debian-packages-${{ inputs.wolfssl_ref }}

      # - name: Install wolfSSL packages from cache
      #   if: steps.wolfssl_cache.outputs.cache-hit == 'true'
      #   run: |
      #     printf "Installing wolfSSL packages from cache:\n"
      #     ls -la ${{ env.WOLFSSL_PACKAGES_PATH }}
      #     apt install --reinstall -y ${{ env.WOLFSSL_PACKAGES_PATH }}/*wolfssl*.deb

      # # TODO: roll this step into utils-wolfssl.sh
      # # TODO: specify tag below
      - name: Build wolfSSL packages and install
      #   # if: steps.wolfssl_cache.outputs.cache-hit != 'true'
        run: |
          $GITHUB_WORKSPACE/debian/install-wolfssl.sh ${{ env.WOLFSSL_PACKAGES_PATH }}
#   

      # Unpack and install wolfSSL packages
      #- name: Unpack and install wolfSSL packages
      #  run: |
      #    mkdir -p ${{ env.WOLFSSL_PACKAGES_PATH }}
      #    tar -xzf .github/packages/debian-wolfssl.tar.gz -C ${{ env.WOLFSSL_PACKAGES_PATH }}
      #    mv ${{ env.WOLFSSL_PACKAGES_PATH }}/debian-packages/* ${{ env.WOLFSSL_PACKAGES_PATH }}
      #    apt install -y ${{ env.WOLFSSL_PACKAGES_PATH }}/*.deb

      # Check for cached OpenSSL packages
      - name: Checking OpenSSL packages in cache
        uses: actions/cache@v4
        id: openssl_cache
        continue-on-error: true
        with:
          path: |
            ${{ env.OPENSSL_PACKAGES_PATH }}
          key: openssl-debian-packages-${{ inputs.openssl_ref }}${{ inputs.replace_default && '-replace-default' || '' }}
          lookup-only: false

      # Install OpenSSL packages from cache if available
      - name: Install OpenSSL packages from cache
        if: steps.openssl_cache.outputs.cache-hit == 'true'
        run: |
          printf "Installing OpenSSL packages from cache:\n"
          ls -la ${{ env.OPENSSL_PACKAGES_PATH }}
          apt install --reinstall -y \
            ${{ env.OPENSSL_PACKAGES_PATH }}/openssl_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl3_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl-dev_*.deb

      - name: Build wolfProvider
        run: |
          WOLFSSL_TAG=${{ inputs.wolfssl_ref }} OPENSSL_TAG=${{ inputs.openssl_ref }} \
            yes "Y" | $GITHUB_WORKSPACE/scripts/build-wolfprovider.sh --debian \
            ${{ inputs.replace_default && '--replace-default' || '' }}

      - name: Setup packages directory
        run: |
          mkdir -p ${{ env.OPENSSL_PACKAGES_PATH }}
          cp $GITHUB_WORKSPACE/../openssl*.deb        ${{ env.OPENSSL_PACKAGES_PATH }}
          cp $GITHUB_WORKSPACE/../libssl*.deb         ${{ env.OPENSSL_PACKAGES_PATH }}

          mkdir -p ${{ env.WOLFPROV_PACKAGES_PATH }}
          cp $GITHUB_WORKSPACE/../libwolfprov*.deb    ${{ env.WOLFPROV_PACKAGES_PATH }}
          cp $GITHUB_WORKSPACE/../libwolfprov*.dsc    ${{ env.WOLFPROV_PACKAGES_PATH }}
          cp $GITHUB_WORKSPACE/../libwolfprov*.tar.gz ${{ env.WOLFPROV_PACKAGES_PATH }}

          printf "Listing packages directory:\n"
          ls -la ${{ env.WOLFPROV_PACKAGES_PATH }}
          ls -la ${{ env.WOLFSSL_PACKAGES_PATH }}
          ls -la ${{ env.OPENSSL_PACKAGES_PATH }}

      - name: Save to cache
        uses: actions/cache/save@v4
        continue-on-error: true
        with:
          path: |
            ${{ env.WOLFSSL_PACKAGES_PATH }}
            ${{ env.OPENSSL_PACKAGES_PATH }}
            ${{ env.WOLFPROV_PACKAGES_PATH }}
          key: openssl-wolfprov-debian-packages-${{ github.sha }}${{ inputs.replace_default && '-replace-default' || '' }}

      # Save all packages in a single artifact for consumers
      # TODO: support debug builds
      - name: Upload wolfProvider artifacts
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: openssl-wolfprov-debian-packages-${{ github.sha }}${{ inputs.replace_default && '-replace-default' || '' }}
          path: |
            ${{ env.WOLFSSL_PACKAGES_PATH }}/*.deb
            ${{ env.WOLFSSL_PACKAGES_PATH }}/*.dsc
            ${{ env.WOLFSSL_PACKAGES_PATH }}/*.tar.gz
            ${{ env.OPENSSL_PACKAGES_PATH }}/*.deb
            ${{ env.OPENSSL_PACKAGES_PATH }}/*.dsc
            ${{ env.OPENSSL_PACKAGES_PATH }}/*.tar.gz
            ${{ env.WOLFPROV_PACKAGES_PATH }}/*.deb
            ${{ env.WOLFPROV_PACKAGES_PATH }}/*.dsc
            ${{ env.WOLFPROV_PACKAGES_PATH }}/*.tar.gz
          retention-days: 1

      # TODO: upload wolfSSL artifacts, after building
      # - name: Upload wolfSSL artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: wolfssl-debian-packages-${{ inputs.wolfssl_ref }}
      #     path: |
      #       ${{ env.WOLFPROV_PACKAGES_PATH }}/*wolfssl*.deb
      #       ${{ env.WOLFPROV_PACKAGES_PATH }}/*wolfssl*.dsc
      #       ${{ env.WOLFPROV_PACKAGES_PATH }}/*wolfssl*.tar.gz
      #     retention-days: 1

