name: iperf Tests

# START OF COMMON SECTION
on:
  push:
    branches: [ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  build_wolfprovider:
    uses: ./.github/workflows/build-wolfprovider.yml
    with:
      wolfssl_ref: ${{ matrix.wolfssl_ref }}
      openssl_ref: ${{ matrix.openssl_ref }}
      fips_ref: ${{ matrix.fips_ref }}
      replace_default: ${{ matrix.replace_default }}
    strategy:
      matrix:
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.2' ]
        fips_ref: [ 'FIPS', 'non-FIPS' ]
        replace_default: [ true ]

  test_iperf:
    runs-on: ubuntu-22.04
    needs: build_wolfprovider
container:
      image: ghcr.io/wolfssl/build-wolfprovider-debian:bookworm
      env:
        DEBIAN_FRONTEND: noninteractive
      # Add network capabilities so ifconfig/RTNETLINK operations are permitted
      # These are passed to `docker run` as runtime options
      options: --cap-add=NET_ADMIN --cap-add=NET_RAW
    # This should be a safe limit for the tests to run.
    timeout-minutes: 20
    strategy:
      matrix:
        iperf_ref: [ '3.12' ]
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.2' ]
        fips_ref: [ 'FIPS', 'non-FIPS' ]
        force_fail: ['WOLFPROV_FORCE_FAIL=1', '']
        replace_default: [ true ]
    env:
      WOLFSSL_PACKAGES_PATH: /tmp/wolfssl-packages
      OPENSSL_PACKAGES_PATH: /tmp/openssl-packages
      WOLFPROV_PACKAGES_PATH: /tmp/wolfprov-packages
    steps:
      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download packages from build job
        uses: actions/download-artifact@v4
        with:
          name: debian-packages-${{ matrix.fips_ref }}${{ matrix.replace_default && '-replace-default' || '' }}-${{ matrix.wolfssl_ref }}-${{ matrix.openssl_ref }}
          path: /tmp/packages

      - name: Setup package directories
        run: |
          mv /tmp/packages/wolfssl-packages ${{ env.WOLFSSL_PACKAGES_PATH }}
          mv /tmp/packages/openssl-packages ${{ env.OPENSSL_PACKAGES_PATH }}
          mv /tmp/packages/wolfprov-packages ${{ env.WOLFPROV_PACKAGES_PATH }}

      - name: Install wolfSSL/OpenSSL/wolfprov packages
        run: |
          printf "Installing OpenSSL/wolfProvider packages (${{ matrix.fips_ref }}):\n"
          ls -la ${{ env.WOLFSSL_PACKAGES_PATH }}
          ls -la ${{ env.OPENSSL_PACKAGES_PATH }}
          ls -la ${{ env.WOLFPROV_PACKAGES_PATH }}

          apt install --reinstall -y --allow-downgrades --allow-change-held-packages \
            ${{ env.WOLFSSL_PACKAGES_PATH }}/libwolfssl_*.deb

          apt install --reinstall -y --allow-downgrades --allow-change-held-packages \
            ${{ env.OPENSSL_PACKAGES_PATH }}/openssl_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl3_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl-dev_*.deb

          apt install --reinstall -y --allow-downgrades --allow-change-held-packages \
            ${{ env.WOLFPROV_PACKAGES_PATH }}/libwolfprov_*.deb

      - name: Verify wolfProvider is properly installed
        run: |
          $GITHUB_WORKSPACE/scripts/verify-install.sh \
            ${{ matrix.replace_default && '--replace-default' || '' }} \
            ${{ matrix.fips_ref == 'FIPS' && '--fips' || '' }}

      - name: Checkout iperf
        uses: actions/checkout@v4
        with:
          repository: esnet/iperf
          ref: ${{ matrix.iperf_ref }}
          path: iperf

      - name: Build iperf
        working-directory: iperf
        run: |
          # Configure with OpenSSL
          ./configure

          # Build iperf
          make -j

      - name: Generate RSA keys
        run: |
          export KEY_DIR=$GITHUB_WORKSPACE/test-keys
          mkdir -p $KEY_DIR
          cd $KEY_DIR
          # Generate RSA keys for iperf tests
          openssl genrsa -out rsa_private_unprotected.pem 2048
          openssl rsa -in rsa_private_unprotected.pem -out rsa_private.pem -aes256 -passout 'pass:password'
          openssl rsa -in rsa_private.pem -pubout -out rsa_public.pem -passin 'pass:password'
          # Create a credentials file for iperf
          # Username: mario, Password: rossi
          echo "mario,bf7a49a846d44b454a5d11e7acfaf13d138bbe0b7483aa3e050879700572709b" > credentials.csv

      - name: Run tests
        working-directory: iperf
        run: |
          export ${{ matrix.force_fail }}

          # Test variables for iperf
          export IPERF3_EXECUTABLE=$GITHUB_WORKSPACE/iperf/src/iperf3
          export IPERF3_LIB=$GITHUB_WORKSPACE/iperf/src/.libs/libiperf.so
          export IPERF3_TEST_INTERVAL=0.1
          export IPERF3_TEST_DURATION=10
          export IPERF3_TEST_LOG=iperf-test.log
          export IPERF3_USER=mario
          export IPERF3_PASSWORD=rossi
          export KEY_DIR=$GITHUB_WORKSPACE/test-keys

          # Launch the iperf server in the background
          $IPERF3_EXECUTABLE -s \
            --rsa-private-key-path $KEY_DIR/rsa_private_unprotected.pem \
            --authorized-users-path $KEY_DIR/credentials.csv &

          # Run the client
          $IPERF3_EXECUTABLE -c localhost -i $IPERF3_TEST_INTERVAL -t $IPERF3_TEST_DURATION \
            --rsa-public-key-path $KEY_DIR/rsa_public.pem \
            --user $IPERF3_USER | tee $IPERF3_TEST_LOG \
