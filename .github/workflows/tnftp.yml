name: tnftp Tests

# START OF COMMON SECTION
on:
  push:
    branches: [ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  build_wolfprovider:
    uses: ./.github/workflows/build-wolfprovider.yml
    with:
      wolfssl_ref: ${{ matrix.wolfssl_ref }}
      openssl_ref: ${{ matrix.openssl_ref }}
      fips_ref: ${{ matrix.fips_ref }}
      replace_default: ${{ matrix.replace_default }}
    strategy:
      matrix:
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.2' ]
        fips_ref: [ 'FIPS', 'non-FIPS' ]
        replace_default: [ true ]

  test_tnftp:
    runs-on: ubuntu-22.04
    needs: build_wolfprovider
container:
      image: ghcr.io/wolfssl/build-wolfprovider-debian:bookworm
      env:
        DEBIAN_FRONTEND: noninteractive
      # Add network capabilities so ifconfig/RTNETLINK operations are permitted
      # These are passed to `docker run` as runtime options
      options: --cap-add=NET_ADMIN --cap-add=NET_RAW
    # This should be a safe limit for the tests to run.
    timeout-minutes: 20
    strategy:
      matrix:
        tnftp_ref: [ 'tnftp-20210827' ]
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.2' ]
        fips_ref: [ 'FIPS', 'non-FIPS' ]
        force_fail: ['WOLFPROV_FORCE_FAIL=1', '']
        replace_default: [ true ]
    env:
      WOLFSSL_PACKAGES_PATH: /tmp/wolfssl-packages
      OPENSSL_PACKAGES_PATH: /tmp/openssl-packages
      WOLFPROV_PACKAGES_PATH: /tmp/wolfprov-packages
    steps:
      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download packages from build job
        uses: actions/download-artifact@v4
        with:
          name: debian-packages-${{ matrix.fips_ref }}${{ matrix.replace_default && '-replace-default' || '' }}-${{ matrix.wolfssl_ref }}-${{ matrix.openssl_ref }}
          path: /tmp/packages

      - name: Setup package directories
        run: |
          # Move packages to expected locations
          mv /tmp/packages/wolfssl-packages ${{ env.WOLFSSL_PACKAGES_PATH }}
          mv /tmp/packages/openssl-packages ${{ env.OPENSSL_PACKAGES_PATH }}
          mv /tmp/packages/wolfprov-packages ${{ env.WOLFPROV_PACKAGES_PATH }}
          
          echo "Packages ready:"
          ls -la ${{ env.WOLFSSL_PACKAGES_PATH }}
          ls -la ${{ env.OPENSSL_PACKAGES_PATH }}
          ls -la ${{ env.WOLFPROV_PACKAGES_PATH }}

      - name: Install wolfSSL/OpenSSL/wolfprov packages
        run: |
          printf "Installing OpenSSL/wolfProvider packages (${{ matrix.fips_ref }}):\n"
          ls -la ${{ env.WOLFSSL_PACKAGES_PATH }}
          ls -la ${{ env.OPENSSL_PACKAGES_PATH }}
          ls -la ${{ env.WOLFPROV_PACKAGES_PATH }}

          apt install --reinstall -y --allow-downgrades --allow-change-held-packages \
            ${{ env.WOLFSSL_PACKAGES_PATH }}/libwolfssl_*.deb

          apt install --reinstall -y --allow-downgrades --allow-change-held-packages \
            ${{ env.OPENSSL_PACKAGES_PATH }}/openssl_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl3_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl-dev_*.deb

          apt install --reinstall -y --allow-downgrades --allow-change-held-packages \
            ${{ env.WOLFPROV_PACKAGES_PATH }}/libwolfprov_*.deb

      - name: Verify wolfProvider is properly installed
        run: |
          $GITHUB_WORKSPACE/scripts/verify-install.sh \
            ${{ matrix.replace_default && '--replace-default' || '' }} \
            ${{ matrix.fips_ref == 'FIPS' && '--fips' || '' }}

      - name: Download and extract tnftp
        run: |
          wget http://ftp.netbsd.org/pub/NetBSD/misc/tnftp/${{ matrix.tnftp_ref }}.tar.gz
          tar xvf ${{ matrix.tnftp_ref }}.tar.gz
          cd ${{ matrix.tnftp_ref }}

      - name: Build and test tnftp
        working-directory: ${{ matrix.tnftp_ref }}
        shell: bash
        run: |
          set +o pipefail # ignore errors from make check
          export ${{ matrix.force_fail }}

          # Configure with OpenSSL
          ./configure

          # Build tnftp
          make -j

          # Run all tests and capture output
          {
              echo "Testing tnftp basic functionality..."

              # Test help command
              if ./src/tnftp -? 2>&1 | grep -q "usage:"; then
                  echo "tnftp help command works"
              else
                  echo "tnftp help command failed"
                  exit 1
              fi

              # Test that tnftp can start (even if it fails to connect)
              echo "Testing tnftp connection attempt..."
              timeout 10 ./src/tnftp -n 192.0.2.1 2>&1 | head -10
              echo "tnftp can attempt connections"

              # Test SSL/TLS functionality
              echo "Testing SSL/TLS connection..."
              timeout 15 ./src/tnftp -n https://httpbin.org/get 2>&1
              echo "SSL/TLS test completed"
          } 2>&1 | tee tnftp-test.log

          # Capture result and check for expected failure
          TEST_RESULT=$(grep -q "SSL context creation failed" tnftp-test.log && echo "1" || echo "0")
          $GITHUB_WORKSPACE/.github/scripts/check-workflow-result.sh $TEST_RESULT ${{ matrix.force_fail }} tnftp
